// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  accounts      Account[]
  email         String    @unique
  emailVerified DateTime?
  name          String?
  comments      Comment[]
  image         String?
  reviews       Review[]
  Session       Session[]
}

model Gadget {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  category    Category? @relation(fields: [categoryName], references: [name])
  categoryName  String?
  review      Review[]
  image       String?
}

model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String    @unique
  searchSlug String?
  content   String
  rating    Int
  gadget    Gadget    @relation(fields: [gadgetId], references: [id])
  gadgetId  String
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  user       User   @relation(fields: [userEmail], references: [email])
  userEmail  String
  review     Review? @relation(fields: [reviewSlug], references: [slug])
  reviewSlug String
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  slug    String   @unique
  gadgets Gadget[]
  Review  Review[]
}
